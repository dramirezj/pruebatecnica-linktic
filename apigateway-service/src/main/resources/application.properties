# Nombre de la aplicación para Eureka
spring.application.name=apigateway-service

# Puerto del Gateway
server.port=8080

# Ruta a Eureka Server
eureka.instance.instance-id=${spring.application.name}:${random.uuid}
eureka.client.serviceUrl.default-zone  = http://eureka:password@localhost:8761/eureka
eureka.instance.prefer-ip-address = true

spring.cloud.gateway.routes[0].id = inventory-service
spring.cloud.gateway.routes[0].uri = lb://INVENTORY-SERVICE
spring.cloud.gateway.routes[0].predicates[0] = Path=/api/inventory/**

#Discovery Server Routes
spring.cloud.gateway.routes[1].id=discovery-service
spring.cloud.gateway.routes[1].uri = http://localhost:8761
spring.cloud.gateway.routes[1].predicates[0] = Path=/eureka/web
spring.cloud.gateway.routes[1].filters[0] = SetPath=/

#Discovery Server Static Routes
spring.cloud.gateway.routes[2].id=discovery-service-static
spring.cloud.gateway.routes[2].uri = http://localhost:8761
spring.cloud.gateway.routes[2].predicates[0] = Path=/eureka/**

spring.cloud.gateway.default-filters[0]=SaveSession
spring.cloud.gateway.default-filters[1]=TokenRelay

#spring.cloud.gateway.routes[1].id = product-service
#spring.cloud.gateway.routes[1].uri = lb://PRODUCT-SERVICE
#spring.cloud.gateway.routes[1].predicates = Path=/api/product/**

# Habilitar descubrimiento de rutas desde Eureka
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# (Opcional) Timeout y configuración del cliente Eureka
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true

# Log de las rutas
logging.level.root=info
logging.level.org.springframework.cloud.gateway=trace
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=info
logging.level.org.springframework.security=debug
logging.level.org.springframework.security.oauth2=debug

# --- OAuth2 Provider (Keycloak) ---
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8181/realms/microservice-realm
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.scope=openid


# --- OAuth2 Client Registration ---
spring.security.oauth2.client.registration.keycloak.client-id=microservice_client
spring.security.oauth2.client.registration.keycloak.client-secret=wbyFISA5r5WlpbMZNOIiNc58p4Bbfws7
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/keycloak

debug=true
